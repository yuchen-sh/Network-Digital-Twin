/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2021 HANY ASSASA
 * Author: Hany Assasa <hany.assasa@gmail.com>
 */
#include "ns3/log.h"
#include "wigig-data-types.h"
#include "ns3/object.h"

namespace ns3 {

std::vector<EDMG_CHANNEL_CONFIG> edmgChannelConfigurations = {

  // 2.16 GHz
  {0b00000001, NOT_AGGREGATE, EDMG_CHANNEL_CH1, 2160, 1, CH_BANDWIDTH_216, 1},
  {0b00000010, NOT_AGGREGATE, EDMG_CHANNEL_CH2, 2160, 1, CH_BANDWIDTH_216, 2},
  {0b00000100, NOT_AGGREGATE, EDMG_CHANNEL_CH3, 2160, 1, CH_BANDWIDTH_216, 3},
  {0b00001000, NOT_AGGREGATE, EDMG_CHANNEL_CH4, 2160, 1, CH_BANDWIDTH_216, 4},
  {0b00010000, NOT_AGGREGATE, EDMG_CHANNEL_CH5, 2160, 1, CH_BANDWIDTH_216, 5},
  {0b00100000, NOT_AGGREGATE, EDMG_CHANNEL_CH6, 2160, 1, CH_BANDWIDTH_216, 6},
  {0b01000000, NOT_AGGREGATE, EDMG_CHANNEL_CH7, 2160, 1, CH_BANDWIDTH_216, 7},
  {0b10000000, NOT_AGGREGATE, EDMG_CHANNEL_CH8, 2160, 1, CH_BANDWIDTH_216, 8},

  // 4.32 GHz
  {0b00000011, NOT_AGGREGATE, EDMG_CHANNEL_CH1, 4320, 2, CH_BANDWIDTH_432, 9},
  {0b00000011, NOT_AGGREGATE, EDMG_CHANNEL_CH2, 4320, 2, CH_BANDWIDTH_432, 9},

  {0b00000110, NOT_AGGREGATE, EDMG_CHANNEL_CH2, 4320, 2, CH_BANDWIDTH_432, 10},
  {0b00000110, NOT_AGGREGATE, EDMG_CHANNEL_CH3, 4320, 2, CH_BANDWIDTH_432, 10},

  {0b00001100, NOT_AGGREGATE, EDMG_CHANNEL_CH3, 4320, 2, CH_BANDWIDTH_432, 11},
  {0b00001100, NOT_AGGREGATE, EDMG_CHANNEL_CH4, 4320, 2, CH_BANDWIDTH_432, 11},

  {0b00011000, NOT_AGGREGATE, EDMG_CHANNEL_CH4, 4320, 2, CH_BANDWIDTH_432, 12},
  {0b00011000, NOT_AGGREGATE, EDMG_CHANNEL_CH5, 4320, 2, CH_BANDWIDTH_432, 12},

  {0b00110000, NOT_AGGREGATE, EDMG_CHANNEL_CH5, 4320, 2, CH_BANDWIDTH_432, 13},
  {0b00110000, NOT_AGGREGATE, EDMG_CHANNEL_CH6, 4320, 2, CH_BANDWIDTH_432, 13},

  {0b01100000, NOT_AGGREGATE, EDMG_CHANNEL_CH6, 4320, 2, CH_BANDWIDTH_432, 14},
  {0b01100000, NOT_AGGREGATE, EDMG_CHANNEL_CH7, 4320, 2, CH_BANDWIDTH_432, 14},

  {0b11000000, NOT_AGGREGATE, EDMG_CHANNEL_CH7, 4320, 2, CH_BANDWIDTH_432, 15},
  {0b11000000, NOT_AGGREGATE, EDMG_CHANNEL_CH8, 4320, 2, CH_BANDWIDTH_432, 15},

  // 6.48 GHz
  {0b00000111, NOT_AGGREGATE, EDMG_CHANNEL_CH1, 6480, 3, CH_BANDWIDTH_648, 17},
  {0b00000111, NOT_AGGREGATE, EDMG_CHANNEL_CH2, 6480, 3, CH_BANDWIDTH_648, 17},
  {0b00000111, NOT_AGGREGATE, EDMG_CHANNEL_CH3, 6480, 3, CH_BANDWIDTH_648, 17},

  {0b00001110, NOT_AGGREGATE, EDMG_CHANNEL_CH2, 6480, 3, CH_BANDWIDTH_648, 18},
  {0b00001110, NOT_AGGREGATE, EDMG_CHANNEL_CH3, 6480, 3, CH_BANDWIDTH_648, 18},
  {0b00001110, NOT_AGGREGATE, EDMG_CHANNEL_CH4, 6480, 3, CH_BANDWIDTH_648, 18},

  {0b00011100, NOT_AGGREGATE, EDMG_CHANNEL_CH3, 6480, 3, CH_BANDWIDTH_648, 19},
  {0b00011100, NOT_AGGREGATE, EDMG_CHANNEL_CH4, 6480, 3, CH_BANDWIDTH_648, 19},
  {0b00011100, NOT_AGGREGATE, EDMG_CHANNEL_CH5, 6480, 3, CH_BANDWIDTH_648, 19},

  {0b00111000, NOT_AGGREGATE, EDMG_CHANNEL_CH4, 6480, 3, CH_BANDWIDTH_648, 20},
  {0b00111000, NOT_AGGREGATE, EDMG_CHANNEL_CH5, 6480, 3, CH_BANDWIDTH_648, 20},
  {0b00111000, NOT_AGGREGATE, EDMG_CHANNEL_CH6, 6480, 3, CH_BANDWIDTH_648, 20},

  {0b01110000, NOT_AGGREGATE, EDMG_CHANNEL_CH5, 6480, 3, CH_BANDWIDTH_648, 21},
  {0b01110000, NOT_AGGREGATE, EDMG_CHANNEL_CH6, 6480, 3, CH_BANDWIDTH_648, 21},
  {0b01110000, NOT_AGGREGATE, EDMG_CHANNEL_CH7, 6480, 3, CH_BANDWIDTH_648, 21},

  {0b11100000, NOT_AGGREGATE, EDMG_CHANNEL_CH6, 6480, 3, CH_BANDWIDTH_648, 22},
  {0b11100000, NOT_AGGREGATE, EDMG_CHANNEL_CH7, 6480, 3, CH_BANDWIDTH_648, 22},
  {0b11100000, NOT_AGGREGATE, EDMG_CHANNEL_CH8, 6480, 3, CH_BANDWIDTH_648, 22},

  // 8.64 GHz
  {0b00001111, NOT_AGGREGATE, EDMG_CHANNEL_CH1, 8640, 4, CH_BANDWIDTH_864, 25},
  {0b00001111, NOT_AGGREGATE, EDMG_CHANNEL_CH2, 8640, 4, CH_BANDWIDTH_864, 25},
  {0b00001111, NOT_AGGREGATE, EDMG_CHANNEL_CH3, 8640, 4, CH_BANDWIDTH_864, 25},
  {0b00001111, NOT_AGGREGATE, EDMG_CHANNEL_CH4, 8640, 4, CH_BANDWIDTH_864, 25},

  {0b00011110, NOT_AGGREGATE, EDMG_CHANNEL_CH2, 8640, 4, CH_BANDWIDTH_864, 26},
  {0b00011110, NOT_AGGREGATE, EDMG_CHANNEL_CH3, 8640, 4, CH_BANDWIDTH_864, 26},
  {0b00011110, NOT_AGGREGATE, EDMG_CHANNEL_CH4, 8640, 4, CH_BANDWIDTH_864, 26},
  {0b00011110, NOT_AGGREGATE, EDMG_CHANNEL_CH5, 8640, 4, CH_BANDWIDTH_864, 26},

  {0b00111100, NOT_AGGREGATE, EDMG_CHANNEL_CH3, 8640, 4, CH_BANDWIDTH_864, 27},
  {0b00111100, NOT_AGGREGATE, EDMG_CHANNEL_CH4, 8640, 4, CH_BANDWIDTH_864, 27},
  {0b00111100, NOT_AGGREGATE, EDMG_CHANNEL_CH5, 8640, 4, CH_BANDWIDTH_864, 27},
  {0b00111100, NOT_AGGREGATE, EDMG_CHANNEL_CH6, 8640, 4, CH_BANDWIDTH_864, 27},

  {0b01111000, NOT_AGGREGATE, EDMG_CHANNEL_CH4, 8640, 4, CH_BANDWIDTH_864, 28},
  {0b01111000, NOT_AGGREGATE, EDMG_CHANNEL_CH5, 8640, 4, CH_BANDWIDTH_864, 28},
  {0b01111000, NOT_AGGREGATE, EDMG_CHANNEL_CH6, 8640, 4, CH_BANDWIDTH_864, 28},
  {0b01111000, NOT_AGGREGATE, EDMG_CHANNEL_CH7, 8640, 4, CH_BANDWIDTH_864, 28},

  {0b11110000, NOT_AGGREGATE, EDMG_CHANNEL_CH5, 8640, 4, CH_BANDWIDTH_864, 29},
  {0b11110000, NOT_AGGREGATE, EDMG_CHANNEL_CH6, 8640, 4, CH_BANDWIDTH_864, 29},
  {0b11110000, NOT_AGGREGATE, EDMG_CHANNEL_CH7, 8640, 4, CH_BANDWIDTH_864, 29},
  {0b11110000, NOT_AGGREGATE, EDMG_CHANNEL_CH8, 8640, 4, CH_BANDWIDTH_864, 29},

};

EDMG_CHANNEL_CONFIG
FindChannelConfiguration (uint8_t primaryCh, uint8_t ch_bandwidth)
{
  for (const auto &it : edmgChannelConfigurations)
    {
      if ((it.primayChannel == primaryCh) && (it.ch_bandwidth == ch_bandwidth))
        {
          return it;
        }
    }
  NS_FATAL_ERROR ("Should not happen");
}

EDMG_CHANNEL_CONFIG
FindChannelConfiguration (uint8_t channelNumber)
{
  for (const auto &it : edmgChannelConfigurations)
    {
      if ((it.chNumber == channelNumber))
        {
          return it;
        }
    }
  NS_FATAL_ERROR ("Could not find a channel configuration with channel number=" << uint16_t (channelNumber));
}

}
