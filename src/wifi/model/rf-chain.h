/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2015-2020 IMDEA Networks Institute
 * Author: Hany Assasa <hany.assasa@gmail.com>
 */
#ifndef RF_CHAIN_H
#define RF_CHAIN_H

#include "ns3/mac48-address.h"
#include "ns3/traced-value.h"
#include "ns3/object.h"

#include "wigig-data-types.h"

#include <map>

namespace ns3 {

enum SectorType {
  TX_SECTOR = 0,
  RX_SECTOR = 1,
  TX_RX_SECTOR = 2,
}; //!< Sector Type (TX/RX/Both).

enum SectorUsage {
  BHI_SECTOR = 0,
  SLS_SECTOR = 1,
  BHI_SLS_SECTOR = 2
}; //!< Sector usage during Beacon Interval.

enum SectorSweepType {
  TransmitSectorSweep = 0,
  ReceiveSectorSweep = 1,
}; //!< Type of the sector level sweep (Transmit or Receive Sector Level Sweep).

enum BeamRefinementType {
  RefineTransmitSector = 0,
  RefineReceiveSector = 1,
}; //!< Type of the Beam Refinement (Tx or Rx).

/**
 * Generic Radiation Pattern Configuration.
 */
struct PatternConfig : public SimpleRefCount<PatternConfig> {
  virtual ~PatternConfig ();
};

/**
 * Generic Antenna Weight Vector (AWV) Configuration.
 */
struct AWV_Config : virtual public PatternConfig {
};

typedef std::vector<Ptr<AWV_Config> > AWV_LIST; //<! Typedef for a list of parametric AWVs.
typedef AWV_LIST::const_iterator AWV_LIST_CI;   //<! Typedef for a parametric AWV constant iterator.
typedef AWV_LIST::iterator AWV_LIST_I;          //<! Typedef for a parametric AWV iterator.

/**
 * Generic Virtual Sector configuration.
 */
struct SectorConfig : virtual public PatternConfig {
  SectorType sectorType;        //!< Type of the sector.
  SectorUsage sectorUsage;      //!< Usage of the predefined sector.
  AWV_LIST awvList;             //!< List of AWVs associated with this sector.
};

typedef std::map<SectorID, Ptr<SectorConfig> > SectorList;  //!< Typedef for vector of generic sectors generated by the phased antenna array.
typedef SectorList::iterator SectorListI;
typedef SectorList::const_iterator SectorListCI;

/**
 * 3D orientation vector in Degrees.
 */
struct Orientation {
  double psi;         //!< Rotation around the z-axis.
  double theta;       //!< Rotation around the y-axis.
  double phi;         //!< Rotation around the x-axis.
  double x;
  double y;
  double z;
};

struct RFChain;

/**
 * Generic Phased antenna array configuration.
 */
struct PhasedAntennaArrayConfig : public SimpleRefCount<PhasedAntennaArrayConfig> {
public:
  PhasedAntennaArrayConfig ()
    : isConnected (false)
  {}

  /**
   * Set the quasi-omni pattern associated with this array.
   * \param A pointer to the configuration of the quasi-omni pattern.
   */
  void SetQuasiOmniConfig (Ptr<PatternConfig> quasiPattern);

public:
  double azimuthOrientationDegree;      //!< Azimuth Orientation degree (Phi in Spherical Cordinates).
  double elevationOrientationDegree;    //!< Elevation Orientation degree (Theta in Spherical Cordinates).
  Orientation orientation;              //!< Phased Antenna Array 3D orientation.
  SectorList sectorList;                //!< Vector of sectors supported by this phased antenna array.
  Ptr<RFChain> rfChain;                 //!< A pointer to the RF chain this array is connected to.
  bool isConnected;                     //!< Flag to indicate if the Array is connected to an RF chain.

protected:
  friend class RFChain;
  Ptr<PatternConfig> m_quasiOmniConfig; //<! Pointer to the quasi-omni pattern associated with this array.

};

typedef std::vector<SectorID> SectorIDList;                                   //!< Typedef for a list of sectors IDs.
typedef SectorIDList::iterator SectorIDListI;                                 //!< Typedef for an iterator over Sector IDs.
typedef std::map<AntennaID, SectorIDList> Antenna2SectorList;                 //!< Typedef for list of sectors per antenna array.
typedef Antenna2SectorList::iterator Antenna2SectorListI;                     //!< Typedef for iterator across antennas to sectors list.
typedef Antenna2SectorList::const_iterator Antenna2SectorListCI;              //!< Typedef for constant iterator antennas to sectors list.
typedef std::map<AntennaID, Ptr<PhasedAntennaArrayConfig> > AntennaArrayList; //!< Typedef for list of phased antenna arrays.
typedef AntennaArrayList::iterator AntennaArrayListI;                         //!< Typedef for codebook Configuration Iterator.
typedef AntennaArrayList::const_iterator AntennaArrayListCI;                  //!< Typedef for codebook Configuration const Iterator.

/**
 * Radio Frequency (RF) Chain configuration.
 *
 * In the current implementation, we assume partially connected beamforming architecture i.e. each RF
 * Chain is connected to either a single or multiple phased antenna arrays. However, only a single
 * antenna array is active within each RF chain.
 */
struct RFChain : public Object
{
public:
  static TypeId GetTypeId (void);

  RFChain (void);
  virtual ~RFChain (void);

  /**
   * Connect a phased antenna array to this RF chain.
   * \param antennaID The ID of the antenna array to be connected to this RF chain.
   * \param array Pointer to the antenna array structure.
   */
  void ConnectPhasedAntennaArray (AntennaID antennaID, Ptr<PhasedAntennaArrayConfig> array);

  /**
   * Set the ID of the active AWV within the current transmit sector.
   * \param awvID The ID of the AWV within the transmit sector.
   */
  void SetActiveTxAwvID (AWV_ID awvID);
  /**
   * Set the ID of the active AWV ID within the current receive sector.
   * \param awvID The ID of the AWV within the receive sector.
   */
  void SetActiveRxAwvID (AWV_ID awvID);
  /**
   * Set the ID of the active transmit sector.
   * \param sectorID The ID of the transmit sector wthin the antenna array.
   */
  void SetActiveTxSectorID (SectorID sectorID);
  /**
   * Set the ID of the active receive sector.
   * \param sectorID The ID of the receive sector wthin the antenna array.
   */
  void SetActiveRxSectorID (SectorID sectorID);
  /**
   * Set the ID of the active transmit sector.
   * \param antennaID The ID of the phased antenna array.
   * \param sectorID The ID of the new sector wthin the antenna array.
   */
  void SetActiveTxSectorID (AntennaID antennaID, SectorID sectorID);
  /**
   * Set the ID of the active receive sector.
   * \param antennaID The ID of the phased antenna array.
   * \param sectorID The ID of the new sector wthin the antenna array.
   */
  void SetActiveRxSectorID (AntennaID antennaID, SectorID sectorID);

  /**
   * Get the ID of the current active AWV within the current transmit sector.
   * \return The ID of the AWV within the transmit sector.
   */
  AWV_ID SetActiveTxAwvID (void) const;
  /**
   * Get the ID of the current active AWV ID within the current receive sector.
   * \return The ID of the AWV within the receive sector.
   */
  AWV_ID SetActiveRxAwvID (void) const;
  /**
   * Get the ID of the current active Tx Sector.
   * \return the ID of the current active Tx Sector.
   */
  SectorID GetActiveTxSectorID (void) const;
  /**
   * Get the ID of the current active Rx Sector.
   * \return the ID of the current active Rx Sector.
   */
  SectorID GetActiveRxSectorID (void) const;
  /**
   * Get the ID of the current active antenna array.
   * \return the ID of the current active antenna array.
   */
  AntennaID GetActiveAntennaID (void) const;

  /**
   * Return the number of AWVs used by the current active Tx/Rx sector.
   * \param antennaID
   * \param sectorID
   * \return The total number of AWVs used by the current active Tx/Rx sector.
   */
  uint8_t GetNumberOfAWVs (AntennaID antennaID, SectorID sectorID) const;
  /**
   * Get active Tx pattern ID (Sector ID or AWV ID).
   * \return Active Tx pattern ID
   */
  uint8_t GetActiveTxPatternID (void) const;
  /**
   * Get active Rx pattern ID (Sector ID or AWV ID).
   * \return Active Rx pattern ID.
   */
  uint8_t GetActiveRxPatternID (void) const;
  /**
   * Get current active transmit antenna array pattern config.
   * \return A pointer to the pattern conifg of the transmit phased antenna array.
   */
  Ptr<PatternConfig> GetTxPatternConfig (void) const;
  /**
   * Get current active receive antenna array pattern config.
   * \return A pointer to the pattern conifg of the receive phased antenna array.
   */
  Ptr<PatternConfig> GetRxPatternConfig (void) const;
  /**
   * Get current active antenna array config.
   * \return A pointer to the current active antenna array config.
   */
  Ptr<PhasedAntennaArrayConfig> GetAntennaArrayConfig (void) const;
  /**
   * Get the next AWV in the AWV list of the selected transmit/receive sector.
   * \return True if we've tried all the AWVs, otherwise False.
   */
  bool GetNextAWV (void);
  /**
   * Reuse the last used transmit sector within the same antenna array.
   * This function is called after Beam Tracking or initiating Beam Refinement.
   */
  void UseLastTxSector (void);
  /**
   * Reuse custom AWV for communication/Beam refinement.
   * This function is called in DmgWifiPhy during beam refinement.
   * \param type Type of Beam refinement - Transmit or Receive.
   */
  void UseCustomAWV (BeamRefinementType type);
  /**
   * Check whether we are using custom AWV for Tx or Rx.
   * \return True if we are using custom AWV, otherwise False if we are using sector.
   */
  bool IsCustomAWVUsed (void) const;

  /**
   * Check the current receiving mode (Quasi = True, Dierctional = False),
   * \return True if the antenna is in quasi-omni reception mode; otherwise false.
   */
  bool IsQuasiOmniMode (void) const;
  /**
   * Select the quasi-omni receive mode for the current phased antenna array.
   */
  void SetReceivingInQuasiOmniMode (void);
  /**
   * Set specific antenna pattern to quasi-omni mode.
   * \param antennaID The ID of the phased antenna array.
   */
  void SetReceivingInQuasiOmniMode (AntennaID antennaID);
  /**
   * Start receiving in Quasi-omni Mode using the antenna array with the lowest ID.
   */
  void StartReceivingInQuasiOmniMode (void);
  /**
   * Switch to the next quasi-omni mode.
   * \return True, if switch has been done, false otherwise.
   */
  bool SwitchToNextQuasiPattern (void);
  /**
   * Set specific antenna pattern to quasi-omni mode when we have multiple antennas
   * but only one of them is active at a time.
   * \param antennaID The ID of the phased antenna array.
   */
  void SetReceivingInDirectionalMode (void);
  /**
   * Initiate Beam Refinement Protocol after completing SLS phase.
   * \param antennaID The ID of the phased antenna array.
   * \param sectorID The ID of the sector to refine wthin the antenna array.
   * \param type Beam Refinement Type (Transmit/Receive).
   */
  void InitiateBRP (AntennaID antennaID, SectorID sectorID, BeamRefinementType type);
  /**
   * For the current sector start using different AWVs if possible.
   * Used in when we are training using TRN-R fields appended to DMG Beacons.
   */
  void StartSectorRefinement (void);
  /**
   * Get number of remaing AWVs in current sector.
   * \return The total number of remaining AWVs in the current sector.
   */
  uint8_t GetRemaingAWVCount (void) const;
  //// NINA ////
  /**
   * Set the ID of the RF Chain ID.
   * \param rfChainId The ID of the RF Chain.
   */
  void SetRfChainId (RFChainID rfChainId);
  /**
   * Get the ID of this RF Chain.
   * \return the ID of the RF Chain.
   */
  RFChainID GetRfChainId (void) const;
  /**
   * Set up the lists of sectors (and AWVs) that will be tested in the sector sweep.
   * (Note: Since currently we are using a single antenna to transmit the MIMO BRP packets,
   * instead of using spatial expansion, this function does not activate any antennas/sectors but instead only sets up lists and
   * pointers to sectors that will be trained in this antenna).
   * \param type Sector Sweep Type (Transmit/Receive).
   * \param beamformingSectors A list of the sectors that will need to be trained in the sector sweep.
   * \param useAwv Whether we also need to train the AWVs within the sectors or only sweep
   */
  void SetUpMimoSectorSweeping (SectorSweepType type, SectorIDList beamformingSectors, bool useAwv);
  /**
   * If not using AWVs get the next sector in the beamforming list, while if using AWVs get the next AWV in the list. Once
   * we are done with all AWVs within the list switch to the next sector. Once we are done with sweeping all the sectors,
   * start again from the start.
   * \param firstSector Whether we are transmitting at the start of the sector sweep.
   */
  void GetNextSector (bool firstSector);
  /**
   * If not using AWVs get the next sector in the beamforming list, while if using AWVs get the next AWV in the list. Once
   * we are done with all AWVs within the list start from the start in order to test all combinations of Awvs
   * \param firstSector Whether we are transmitting at the start of the sector sweep.
   */
  bool GetNextAwvWithCombinations (bool firstSector, bool switchAwv);
  /**
   * Reuse the sector used before starting the sweeping.
   * This function is called during BRP TXSS for transmitting the P subfields.
   */
  void UseOldTxSector (void);
  /**
   * Get the next sector in the beamforming list - used in MIMO phase of SU-MIMO BFT when all combinations of AWVs are tested.
   */
  void GetNextSectorWithCombinations (void);
  /**
   * Activate the correct Tx or Rx antenna configuration during MIMO Beamforming training.
   */
  void SetActiveMimoAntennaConfiguration (void);
  /**
   * Return to the first Rx or Tx antenna pattern in the list during MIMO Beamforming training.
   */
  void SetFirstAntennaConfiguration (void);
  //// NINA ////

  /**
   * Reset RF chain settings including the active antenna ID and sector ID.
   */
  void Reset (void);

protected:
  virtual void DoDispose ();
  virtual void DoInitialize (void);

private:
  /**
   * Set the ID of the active antenna array.
   * \param antennaID The ID of the antenna array within the device.
   */
  void SetActiveAntennaID (AntennaID antennaID);

private:
  //// NINA ////
  RFChainID m_rfChainId;                            //!< RF Chain ID of this RF Chain.
  //// NINA ////
  AntennaArrayList m_antennaArrayList;              //!< List of phased antenna arrays connected to this RF Chain.
  TracedValue<AntennaID> m_antennaID;               //!< The ID of the current active phased antenna array.
  TracedValue<SectorID> m_txSectorID;               //!< The ID of the current active transmit sector.
  TracedValue<SectorID> m_rxSectorID;               //!< The ID of the current active receive sector.
  Ptr<PhasedAntennaArrayConfig> m_antennaConfig;    //!< Pointer to the current active antenna array.
  Ptr<PatternConfig> m_txPattern;                   //!< Pointer to the current transmit configuration either sector or custom AWV.
  Ptr<PatternConfig> m_rxPattern;                   //!< Pointer to the current receive configuration either sector or custom AWV.

  //// NINA ////
  /* Beamforming Variables */
  SectorIDList m_currentBeamformingSectors;   //!< The current SectorId list to iterate through MIMO beamforming training.
  SectorIDListI m_currentSectorI;             //!< An iterator for the current sector ID list.
  SectorID m_oldSectorId;                     //!< The Sector Id used before the beamforming training starts - needed for transmission of the P subfields.
  bool m_usingAWVs;                           //!< Flag to indicate whether we are currently training the AWVs of a given sector or not - used during MIMO beamforming training.
  SectorSweepType m_sectorSweepType;          //!< Sector sweep type during MIMO sector sweeping
  //// NINA ////

  /* Beam Refinement and Tracking Variables */
  bool m_useAWV;                              //!< Flag to indicate if we are using custom AWV for communication.
  BeamRefinementType m_beamRefinmentType;     //!< Beam Refinment type during BRP Phase (Transmit/Receive).
  AWV_LIST *m_currentAwvList;                 //!< The current AWV List to iterate through during BRP.
  AWV_LIST_I m_currentAwvI;                   //!< An iterator for the current AWV list.
  uint8_t m_remainingAwvs;                    //!< The number of remaining Awvs in the current list.

  /* Quasi-omni Information */
  bool m_quasiOmniMode;                       //!< Flag to indicate if we receive in quasi-omni mode in the current receive antenna.
  AntennaArrayListI m_quasiAntennaIter;       //!< An iterator to the current Antenna Array in Quasi Omni Mode.

};

/*** Type definitions for IEEE 802.11ay Support ****/
typedef std::map<RFChainID, Ptr<RFChain> > RFChainList;           //!< Typedef for list of RF chains.
typedef RFChainList::iterator RFChainListI;                       //!< Typedef for iterator across RF chains.
typedef RFChainList::const_iterator RFChainListCI;                //!< Typedef for constant iterator across RF chains.
typedef std::map<RFChainID, AntennaID> ActiveRFChainList;         //!< Typedef for list of active RF Chains and their corresponding active antennas.
typedef ActiveRFChainList::iterator ActiveRFChainListI;           //!< Typedef for iterator across active RF chains.
typedef ActiveRFChainList::iterator ActiveRFChainListCI;          //!< Typedef for constant iterator across active RF chains.
typedef std::vector<std::pair<AntennaID, Ptr<PatternConfig> > > ActivePatternList; //!< Typedef for list of active beam patterns.


} // namespace ns3

#endif /* RF_CHAIN_H */
